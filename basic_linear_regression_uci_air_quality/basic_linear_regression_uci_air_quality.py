# -*- coding: utf-8 -*-
"""basic_linear_regression_uci_air_quality

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x1ScNsAlS7iHw54tOLPJHHiOO4OBslS1
"""

# package imports
import imp
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression



#Read in the xlsx file and safe to df
air_quality_df = pd.read_excel('AirQualityUCI.xlsx', engine='openpyxl')
display(air_quality_df.head())

# data cleaning

new_air_quality_df = air_quality_df.copy()
new_air_quality_df.dropna(inplace=True)
new_air_quality_df.drop(['Date', 'Time'], axis=1, inplace=True) # discard Date and time for sake of project
display(new_air_quality_df.head())

# plot histograms and heatmaps to view data

new_air_quality_df.hist(bins=15, figsize=(15, 10))
plt.show()

plt.figure(figsize=(14, 12))
sns.heatmap(new_air_quality_df.corr(), annot=True)
plt.show()

# basic feature engineering

# target variable = NO2(GT)
X = new_air_quality_df.drop('NO2(GT)', axis=1)
y = new_air_quality_df['NO2(GT)']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# split dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred = lr_model.predict(X_test)
display(y_pred)

# evaluate model with MSE
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse}")

# plot graph of values vs linear regress model
plt.scatter(y_test, y_pred, alpha=0.6)
# ideal plot
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.grid()
plt.axis('equal')
plt.xlabel('actual')
plt.ylabel('predicted')
plt.show()

# try dropping non relevant features
corr_matrix = new_air_quality_df.corr().abs()
target_correlation = corr_matrix['NO2(GT)']
# define a threshold
threshold = 0.1
low_correlation_features = target_correlation[target_correlation < threshold].index.tolist()
feature_dropped_air_quality = new_air_quality_df.drop(low_correlation_features, axis=1)
print(feature_dropped_air_quality.head())

# try a new model and see how the MSE improves
X = new_air_quality_df.drop('NO2(GT)', axis=1)
y = new_air_quality_df['NO2(GT)']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
lr_model_2 = LinearRegression()
lr_model_2.fit(X_train, y_train)
y_pred_2 = lr_model_2.predict(X_test)
mse_2 = mean_squared_error(y_test, y_pred_2)
print(mse_2)
print("Nope that got worse")

